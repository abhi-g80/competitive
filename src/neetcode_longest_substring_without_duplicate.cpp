// https://neetcode.io/problems/longest-substring-without-duplicates
#include <chrono>
#include <climits>
#include <cmath>
#include <cstdint>
#include <functional>
#include <iostream>
#include <unordered_map>
#include <vector>

using namespace std;

class Solution {
   public:
    int lengthOfLongest3(string s) {
        // You keep maintaining a sub-string (l -> r) and calculate its length,
        // and then report the max length.
        // Idea is to move the left pointer to the new position when you
        // see a duplicate. The new position is the previously seen position
        // of the duplicate char + 1 (such that you move the left pointer is on
        // a new char.) If this char is again the same, in the next loop we shall
        // move the left pointer one space to the right.
        int l = 0;
        int max_length = 0;
        unordered_map<char, int> chars;
        for (int32_t i = 0; i < s.size(); i++) {
            if (chars.find(s[i]) != chars.end()) {
                l = max(chars[s[i]] + 1, l);
            }
            max_length = max(i - l + 1, max_length);
            chars[s[i]] = i;
        }

        return max_length;
    }
    int lengthOfLongest2(string s) {
        // Trying to find a nice prefix uniq way of calculating the longest
        // unique substring. Not complete yet.
        int max_length = 0;
        unordered_map<char, int> chars;
        vector<int> prefix_uniq(s.size() + 1);
        for (uint32_t i = 0; i < s.size(); i++) {
            if (chars.find(s[i]) == chars.end()) {
                if (i == 0)
                    prefix_uniq[i] = 1;
                else
                    prefix_uniq[i] = 1 + prefix_uniq[i - 1];
            } else {
                prefix_uniq[i] = prefix_uniq[i - 1];
            }
            chars[s[i]] = i;
        }
        for (uint32_t i = 0; i < s.size(); i++)
            if (prefix_uniq[i] > max_length) max_length = prefix_uniq[i];
        return max_length;
    }
    int lengthOfLongest(string s) {
        // Et tu, Brute ?
        int length, max_length = 0;
        unordered_map<char, bool> seen;
        for (uint32_t i = 0; i < s.size(); i++) {
            seen[s[i]] = true;
            uint32_t j = i + 1;
            length = 1;
            if (length > max_length) max_length = length;
            while ((seen.find(s[j]) == seen.end()) && (j < s.size())) {
                seen[s[j]] = true;
                length++;
                if (length > max_length) max_length = length;
                j++;
            }
            seen.clear();
        }
        return max_length;
    }
};

struct TestCase {
    string v;
    int expected;

    std::function<int(string)> func;

    void run(int n) {
        using chrono::duration;
        using chrono::duration_cast;
        using chrono::high_resolution_clock;
        using chrono::microseconds;
        using chrono::milliseconds;

        auto t1 = high_resolution_clock::now();
        int ans = func(v);
        auto t2 = high_resolution_clock::now();
        duration<double, micro> time_taken = t2 - t1;

        cout << boolalpha << "Testcase #" << n << ": ";

        if (ans != expected) {
            cout << "Failed! - expected '" << expected << "' got '" << ans << "'";
        } else
            cout << "Passed!";
        cout << " Time taken: " << time_taken.count() << "ms"
             << "\n";
    }
};

int main() {
    ios::sync_with_stdio(0), cin.tie(0);
    vector<int> v;

    Solution s;

    auto lengthOfLongest = [&](std::string v) { return s.lengthOfLongest3(v); };

    vector<TestCase> testcases = {
        // clang-format off
        {"zxyzxyxyz", 3, lengthOfLongest},
        {"xxxx", 1, lengthOfLongest},
        {"xx", 1, lengthOfLongest},
        {"x", 1, lengthOfLongest},
        {"", 0, lengthOfLongest},
        {"aabcadaaasfydee", 6, lengthOfLongest},
        {"aabcadfyeeaaabbbaaa", 7, lengthOfLongest},
        {"dvdf", 3, lengthOfLongest},

        // this example is generated by a random string generator
        {"nxXnbX9q%3TPHw2W833@$kVrQcP9UetmGr$UZbAudYqwtTUJOwFdMVVx*Wz2u91Gs=fBa7Np*zqJfZ7Fxc6@%qR!C+h5+5hGa*7m", 18, lengthOfLongest},

        // clang-format on
    };

    int i = 1;
    for (auto& testCase : testcases) {
        testCase.run(i++);
    }

    return 0;
}
